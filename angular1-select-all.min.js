/*
 angular1-select-all module.
 @version 1.0.2
 @link https://manikantag/github.io/angular1-select-all
 @author Manikanta G
 @license MIT License, http://www.opensource.org/licenses/MIT
*/
(function(){angular.module("angular1-select-all",[]).value("mgCbSelectAllConfig",{memberModelKey:"__selected"}).directive("mgCbGroup",["mgCbSelectAllConfig",function(f){return{scope:{mgCbGroup:"="},restrict:"AE",controller:["$scope",function(a){var d;a.$on("$destroy",function(){d=null});return{notify:function(a,e){d&&d(a,e)},subscribe:function(a){d=a},getMemberModelKey:function(){return a.mgCbGroup&&a.mgCbGroup.memberModelKey||f.memberModelKey||"__selected"}}}]}}]).directive("mgCbSelectAll",["$timeout",
function(f){return{scope:{mgCbSelectAll:"=",mgCbSelectedCount:"=",ngModel:"="},restrict:"AE",require:["ngModel","^mgCbGroup"],link:function(a,d,k,e){function g(c){var b,d=a.mgCbSelectAll.length;for(b=0;b<d;b++)a.mgCbSelectAll[b][m]=c;a.mgCbSelectedCount=c?d:0}function l(){var c,b=a.mgCbSelectAll.length,d=0;for(c=0;c<b;c++)a.mgCbSelectAll[c][m]&&d++;return d}var h=e[0];d=e[1];var b=!0,m=d.getMemberModelKey();console.debug("mgCbSelectAll: Using '%s' as memberModelKey",m);f(function(){a.mgCbSelectedCount=
l()});d.subscribe(function(c,b){console.debug("mgCbSelectAll: subscribe(): new event",c,b);a.$apply(function(){a.ngModel={bymgCbMember:!0}})});h.$parsers.push(function(a){b||(console.debug("mgCbSelectAll: $parsers(): view value changed to %s --\x3e updating all checkboxes",a),g(a));b&&(b=!1);return a});h.$formatters.push(function(c){if(c||!b)angular.isObject(c)&&c.bymgCbMember?(console.debug("mgCbSelectAll: $formatters(): model value changed to %s by mg-cb-member/mg-cb-clear directive --\x3e re-calculating selected count",
c),a.mgCbSelectedCount=l(),c=a.mgCbSelectAll.length?a.mgCbSelectedCount===a.mgCbSelectAll.length:!1,h.$modelValue=c,a.ngModel=c):(console.debug("mgCbSelectAll: $formatters(): model value changed to %s --\x3e updating all checkboxes",c),g(c));b&&(b=!1);return c});a.$watch("mgCbSelectAll.length",function(b){console.debug("mgCbSelectAll: $watch(): mgCbSelectAll array length changed to: %i",b);a.ngModel={bymgCbMember:!0};h.$render()})}}}]).directive("mgCbMember",["$parse","$timeout",function(f,a){return{scope:{},
restrict:"AE",require:["ngModel","^mgCbGroup"],link:function(d,k,e,g){k=g[0];var l=-1,h=g[1];e.mgCbMemberIndex&&(l=f(e.mgCbMemberIndex)(d.$parent));k.$parsers.push(function(b){console.debug("mgCbMember %i: $parsers(): view value changed to %s --\x3e notifying mg-cb-group",l,b);a(function(){h.notify("mgCbMember")});return b})}}}]).directive("mgCbClear",[function(){return{scope:{mgCbMembers:"=mgCbClear"},restrict:"AE",require:["^mgCbGroup"],link:function(f,a,d,k){var e=k[0],g=e.getMemberModelKey();
if(f.mgCbMembers)a.on("click",function(){var a=f.mgCbMembers,d=a.length,b;f.$apply(function(){for(b=0;b<d;b++)a[b][g]&&(a[b][g]=!1)});e.notify("mgCbClear")});else console.warn("mgCbClear: mg-cb-members collection is not passed. Not initialising the directive.")}}}])})();
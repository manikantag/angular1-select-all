/*
 angular1-select-all module.
 @version 1.1.0
 @link https://manikantag/github.io/angular1-select-all
 @author Manikanta G
 @license MIT License, http://www.opensource.org/licenses/MIT
*/
(function(){angular.module("angular1-select-all",[]).value("mgCbSelectAllConfig",{memberModelKey:"__selected"}).directive("mgCbGroup",["mgCbSelectAllConfig",function(f){return{scope:{mgCbGroup:"="},restrict:"AE",controller:["$scope",function(a){var b;a.$on("$destroy",function(){b=null});return{getMemberFilterFn:function(){if(a.mgCbGroup&&a.mgCbGroup.memberFilterFn)return a.mgCbGroup.memberFilterFn},notify:function(a,d){b&&b(a,d)},subscribe:function(a){b=a},getMemberModelKey:function(){return a.mgCbGroup&&
a.mgCbGroup.memberModelKey||f.memberModelKey||"__selected"}}}]}}]).directive("mgCbSelectAll",["$timeout",function(f){return{scope:{mgCbSelectAll:"=",mgCbSelectedCount:"=",ngModel:"="},restrict:"AE",require:["ngModel","^mgCbGroup"],link:function(a,b,m,d){function h(c){var b,d=0;for(b=0;b<a.mgCbSelectAll.length;b++)if(!n||n(a.mgCbSelectAll[b],b))a.mgCbSelectAll[b][e]=c,d++;a.mgCbSelectedCount=c?d:0}function k(){var c,b=a.mgCbSelectAll.length,d=0,g=0;for(c=0;c<b;c++)n&&!n(a.mgCbSelectAll[c],c)?g++:a.mgCbSelectAll[c][e]&&
d++;return[d,g]}var g=d[0];b=d[1];var l=!0,e=b.getMemberModelKey(),n=b.getMemberFilterFn();console.debug("mgCbSelectAll: Using '%s' as memberModelKey",e);f(function(){a.mgCbSelectedCount=k()[0]});b.subscribe(function(c,b){console.debug("mgCbSelectAll: subscribe(): new event",c,b);a.$apply(function(){a.ngModel={bymgCbMember:!0}})});g.$parsers.push(function(a){l||(console.debug("mgCbSelectAll: $parsers(): view value changed to %s --\x3e updating all checkboxes",a),h(a));l&&(l=!1);return a});g.$formatters.push(function(c){if(c||
!l)angular.isObject(c)&&c.bymgCbMember?(console.debug("mgCbSelectAll: $formatters(): model value changed to %s by mg-cb-member/mg-cb-clear directive --\x3e re-calculating selected count",c),c=k(),a.mgCbSelectedCount=c[0],c=a.mgCbSelectAll.length&&a.mgCbSelectedCount===a.mgCbSelectAll.length-c[1],g.$modelValue=c,a.ngModel=c):(console.debug("mgCbSelectAll: $formatters(): model value changed to %s --\x3e updating all checkboxes",c),h(c));l&&(l=!1);return c});a.$watch("mgCbSelectAll.length",function(c){console.debug("mgCbSelectAll: $watch(): mgCbSelectAll array length changed to: %i",
c);a.ngModel={bymgCbMember:!0};g.$render()})}}}]).directive("mgCbMember",["$parse","$timeout",function(f,a){return{scope:{},restrict:"AE",require:["ngModel","^mgCbGroup"],link:function(b,m,d,h){m=h[0];var k=-1,g=h[1];d.mgCbMemberIndex&&(k=f(d.mgCbMemberIndex)(b.$parent));m.$parsers.push(function(b){console.debug("mgCbMember %i: $parsers(): view value changed to %s --\x3e notifying mg-cb-group",k,b);a(function(){g.notify("mgCbMember")});return b})}}}]).directive("mgCbClear",[function(){return{scope:{mgCbMembers:"=mgCbClear"},
restrict:"AE",require:["^mgCbGroup"],link:function(f,a,b,m){var d=m[0],h=d.getMemberModelKey(),k=d.getMemberFilterFn();if(f.mgCbMembers)a.on("click",function(){var a=f.mgCbMembers,b=a.length,e;f.$apply(function(){for(e=0;e<b;e++)(!k||k(a[e],e))&&a[e][h]&&(a[e][h]=!1)});d.notify("mgCbClear")});else console.warn("mgCbClear: mg-cb-members collection is not passed. Not initialising the directive.")}}}])})();